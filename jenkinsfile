pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "my-app"
        REGISTRY = "docker.io"  // If you're using Docker Hub
        REGISTRY_CREDENTIALS = "docker-credentials-id"  // Jenkins credentials for Docker login
        DEPLOY_SERVER = "user@your-server.com"  // Replace with your server's SSH login
        DEPLOY_PATH = "/path/to/deployment/directory"
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the code from your Git repository
                git 'https://github.com/your-repo/your-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image from the Dockerfile in your repo
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }

        stage('Run Docker Container for Testing') {
            steps {
                script {
                    // Run the container (e.g., for tests, linting, etc.)
                    sh 'docker run --rm ${DOCKER_IMAGE}'
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    // Log in to Docker registry
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS ${REGISTRY}'
                    }

                    // Tag and push the Docker image
                    sh 'docker tag ${DOCKER_IMAGE} ${REGISTRY}/${DOCKER_IMAGE}:latest'
                    sh 'docker push ${REGISTRY}/${DOCKER_IMAGE}:latest'
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    // SSH into the deployment server and restart the Docker container
                    sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "
                            docker pull ${REGISTRY}/${DOCKER_IMAGE}:latest &&
                            docker stop my-app-container || true &&
                            docker rm my-app-container || true &&
                            docker run -d --name my-app-container -p 80:80 ${REGISTRY}/${DOCKER_IMAGE}:latest
                        "
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup Docker images after pipeline finishes
            sh 'docker system prune -f'
        }
    }
}
