pipeline {
    agent any  // Use any available agent
    environment {
        GIT_REPO = 'https://github.com/sibilucky/dockerjenkins-.git'
        DOCKER_IMAGE = 'sibisam2301/myapp-backend'
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub'
        DOCKER_EMAIL = 'sibisam2301@gmail.com'
    }
    stages {
        stage('Checkout') {
            steps {
                // Check out the repository
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: GIT_REPO]]])
            }
        }

        stage('Build Docker Image') {
            agent { label 'docker' }  // Ensure this agent has Docker installed
            steps {
                script {
                    // Use BUILD_TAG to create a unique tag for each image
                    sh 'docker build -t sibisam2301/myapp-backend:${env.BUILD_TAG} .'
                    
                    // List the newly built image to confirm its presence
                    sh 'docker images sibisam2301/myapp-backend'
                }
            }
        }
        
        stage('Push Image to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: DOCKER_REGISTRY_CREDENTIALS, variable: 'dockerhubpwd')]) {
                        // Login to Docker Hub and push the built image with the build tag
                        sh 'docker login -u sibisam2301 -p ${dockerhubpwd}'
                        sh 'docker push sibisam2301/myapp-backend:${env.BUILD_TAG}'
                    }
                }
            }
        }

        stage('Update Application') {
            agent { label 'stage' }  // Ensure this agent has Docker installed
            steps {
                script {
                    // Stop and remove any running containers
                    sh '''
                    CID=$(sudo docker ps -q)
                    if [ -n "$CID" ]; then 
                        sudo docker stop $CID && sudo docker rm $CID
                    else 
                        echo "No Container is running"
                    fi
                    '''

                    // Run the latest container on port 80, mapping port 4000 inside the container
                    sh "sudo docker run -itd -p 80:4000 --name sibisam2301 ${DOCKER_IMAGE}:${env.BUILD_TAG} serve --host=0.0.0.0"

                    // Output the running container's ID and provide the blog URL
                    sh 'sudo docker ps -qa'
                    sh '''set +x; echo "Please navigate to http://"`curl ifconfig.ca`; set -x'''
                }
            }
        }
    }
}

