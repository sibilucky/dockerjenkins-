pipeline {
    agent any  // Use any available agent
    environment {
        GIT_REPO = 'https://github.com/sibilucky/dockerjenkins-.git'
        DOCKER_IMAGE = 'sibisam2301/myapp-backend'
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub'
        DOCKER_EMAIL = 'sibisam2301@gmail.com'  // Optional if not needed
    }
    stages {
        stage('Checkout') {
            steps {
                // Check out the repository
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: GIT_REPO]]])
            }
        }

        stage('Build Docker Image') {
            agent { label 'docker' }  // Ensure this agent has Docker installed
            steps {
                script {
                    echo "Building Docker image with tag: ${env.BUILD_TAG}"
                    sh 'docker build -t ${DOCKER_IMAGE}:${env.BUILD_TAG} .'
                    sh 'docker images'
                }
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: DOCKER_REGISTRY_CREDENTIALS, variable: 'dockerhubpwd')]) {
                        // Login to Docker Hub
                        sh "echo ${dockerhubpwd} | docker login -u sibisam2301 --password-stdin"
                        // Push the built image with the build tag
                        sh "docker push ${DOCKER_IMAGE}:${env.BUILD_TAG}"
                    }
                }
            }
        }

        stage('Update Application') {
            agent { label 'stage' }  // Ensure this agent has Docker installed
            steps {
                script {
                    try {
                        // Stop and remove any running containers
                        sh '''
                        CID=$(sudo docker ps -q)
                        if [ -n "$CID" ]; then 
                            sudo docker stop $CID && sudo docker rm $CID
                        else 
                            echo "No Container is running"
                        fi
                        '''

                        // Run the latest container on port 80, mapping port 4000 inside the container
                        sh "sudo docker run -itd -p 80:4000 --name ${DOCKER_IMAGE}-${env.BUILD_ID} ${DOCKER_IMAGE}:${env.BUILD_TAG} serve --host=0.0.0.0"

                        // Output the running container's ID and provide the blog URL
                        sh 'sudo docker ps -qa'
                        sh '''set +x; echo "Please navigate to http://"`curl ifconfig.ca`; set -x'''
                    } catch (Exception e) {
                        echo "An error occurred: ${e.getMessage()}"
                        error("Pipeline failed due to errors in Update Application stage.")
                    }
                }
            }
        }
    }
}
