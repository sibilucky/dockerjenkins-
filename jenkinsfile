pipeline {
    agent none
    environment {
        GIT_REPO = 'https://github.com/sibilucky/dockerjenkins-.git'
        DOCKER_IMAGE = 'sibisam2301/myapp-backend'
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub'
        DOCKER_EMAIL = 'sibisam2301'
    }
    stages {
        stage('Checkout') {
            agent { label 'stage' }  // Define the agent for this stage
            steps {
                git credentialsId: 'github-credentials', url: "${git clone https://github.com/sibilucky/dockerjenkins.git
}", branch: 'main'
            }
        }

        stage('Container Image Builds') {
            agent { label 'docker' }
            steps {
                script {
                    // Build the Docker image
                    docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}", ".")
                }
            }
        }

        stage('Image Push to Dockerhub') {
            agent { label 'docker' } // Ensure this stage has the appropriate agent
            steps {
                script {
                    // Check if the image was built and tagged correctly
                    sh "docker images"
                    
                    // Push the image to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_REGISTRY_CREDENTIALS) {
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_NUMBER}").push()
                    }
                }
            }
        }

        stage('Update Docker Container') {
            agent { label 'docker' }
            steps {
                script {
                    // Check if a container named dockerfile is running and remove it
                    sh '''
                    CID=$(docker ps -q --filter "name=dockerfile")
                    if [ -n "$CID" ]; then 
                        docker stop $CID && docker rm $CID
                    else 
                        echo "No Container named dockerfile is running"
                    fi
                    '''
                    
                    // Run the new container from the built image
                    sh "docker run -itd -p 80:5000 --name dockerfile ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                    
                    // List all containers
                    sh 'docker ps -qa'
                    
                    // Get the public IP of the machine and display it
                    sh '''
                    echo "Please navigate to http://"`curl -s ifconfig.me`
                    '''
                }
            }
        }
    }
}

